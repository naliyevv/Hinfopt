function redsys = reduceParamSystem( sys, U, V )
%
% PURPOSE:
%
% To construct the matrices representing the reduced transfer function 
% Hr(s;μ) obtained from a transfer function Hr(s;μ) by projecting on the 
% spaces spanned by the matrices U and V.    
% The function Hr(s;μ) is given by
%
%   H(s;μ) := C(μ)*(sE(μ) − A(μ))^(−1)*B(μ),
%
% where
%
%   A(μ) = a_1(μ)*A_1 + ... + a_{κ_A}(μ)*A_{κ_A}, 
%   B(μ) = b_1(μ)*B_1 + ... + b_{κ_B}(μ)*B_{κ_B},                       (2)
%   C(μ) = c_1(μ)*C_1 + ... + c_{κ_C}(μ)*C_{κ_C}, 
%   E(μ) = e_1(μ)*E_1 + ... + e_{κ_E}(μ)*E_{κ_E},
%
% and a_j, b_j, c_j, e_j are scalar-valued real-analytic functions and A_j,
% B_j, C_j, and E_j are fixed matrices.
% The reduced function Hr(s;μ) is given by
%
%   Hr(s;μ) := Cr(μ)*(sEr(μ) − Ar(μ))^(−1)*Br(μ),   
%
% where 
%
%   Ar(μ) = a_1(μ)*U'*A_1*V + ... + a_{κ_a}(μ)*U'*A_{κ_a}*V,
%   Br(μ) = b_1(μ)*U'*B_1   + ... + b_{κ_b}(μ)*U'*B_{κ_b},              (3)
%   Cr(μ) = c_1(μ)*   C_1*V + ... + c_{κ_c}(μ)*   C_{κ_c}*V,                     
%   Er(μ) = e_1(μ)*U'*E_1*V + ... + e_{κ_e}(μ)*U'*E_{κ_e}*V.
%
% ARGUMENTS:
%
% Inputs:
%
% sys     : a struct containg the structural information of the function
%           H(s;μ) specified as follows:
%    sys.A, sys.B, sys.C,  
%    sys.E                : arrays containing the matrices A_j, B_j, C_j,
%                           and E_j in (2), respectively. If κ_X is larger 
%                           than 1, i.e., the number of summands within the
%                           function X(μ) is larger than 1 and multiple 
%                           constant matrices X_1 to X_{κ_X} must be given,
%                           they must be stored in a cell array as 
%                           sys.X = { X_1, ..., X_{κ_X} }, where X is 
%                           either A, B, C, or E.  
%    sys.f.A, sys.f.B, 
%    sys.f.C, sys.f.E     : function handles specifying the functions 
%                           x_1, ..., x_{κ_X} stored in vector, i.e.,
%                           sys.f.X(k) = x_k, where x is either a, b, c, or
%                           e and X is either A, B, C, or E.                           
%    sys.fgname           : name of a function that returns L-infinity norm 
%                           of a transfer function of the form (1)-(2) and 
%                           its gradient for a particular parameter μ.
%                           fgname is specified as 
%                              [ f, g ] = fgname( mu, rsys, boydbalak ),
%                           where
%                              * mu is the point μ;
%                              * rsys contains the information rsys.A,
%                                rsys.B, rsys.C, rsys.E, rsys.f.A,
%                                rsys.f.B, rsys.f.C, and rsys.f.E for the 
%                                input transfer function as described
%                                above;
%                              * method specifies the implementation of
%                                the Boyd-Balakrishnan algorithm for 
%                                computing the L-infinity norm as follows:
%                                = 0: use the FORTRAN routine AB13HD.f 
%                                     which is called by the gateway 
%                                     function generated by linorm_h.F;
%                                = 1: use the function 'norm' of the MATLAB
%                                     Control System Toolbox (WARNING: This
%                                     may not work, if the input descriptor
%                                     matrix rsys.E is singular at μ.);
%                                (default = 0);
%                              * f, g are the L-infinity norm and its 
%                                gradient at the point μ.          
% sys.bounds.lb, 
% sys.bounds.ub          : lower and upper bounds of the parameter box 
%                          domain D. Hereby, sys.bounds.lb(k) and
%                          sys.bounds.ub(k) are the bounds for the k-th
%                          parameter, respectively.
%
% Outputs:
%            
% redsys  : Struct containing the structural information of the the reduced
%           function Hr(s;μ). Only the matrices are updated, all the other
%           information is copied from sys.
%    redsys.A, redsys.B,
%    redsys.C, redsys.D   : arrays containing the reduced matrices 
%                           U'*A_j*V, U'*B_j, C_j*V, and U'*E_j*V in (3),
%                           respectively. If κ_X is larger than 1, i.e., 
%                           the number of summands within the function 
%                           Xr(μ) is larger than 1, then they are
%                           stored in a cell array as 
%                           redsys.X = { Xr_1, ..., Xr_{κ_X} }, where X is
%                           is either A, B, C, or E.
%    redsys.f.A           : = sys.f.A.
%    redsys.f.B           : = sys.f.B.
%    redsys.f.C           : = sys.f.C.
%    redsys.f.E           : = sys.f.E.
%    redsys.fgname        : = sys.fgname.
%    redsys.bounds.lb     : = sys.bounds.lb.
%    redsys.bounds.ub     : = sys.bounds.ub.
%
% REFERENCES:
%
% [1] N. Aliyev, P. Benner, E. Mengi, and M. Voigt.
%     A subspace framework for H-infinity norm minimization. Submitted for
%     publication, 2019.
%
% AUTHORS:
%
% Nicat Aliyev and Emre Mengi, Koc University, Istanbul, Turkey.
%
% Matthias Voigt, Technische Universitaet Berlin, Institut fuer Mathematik,
% Berlin, Germany.
%
% 07/11/2017.
%
% REVISIONS:
%
% -
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  HINFOPT 1.0 Copyright (C) 2019 Nicat Aliyev, Emre Mengi, Matthias Voigt 
%
%  This program is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  (at your option) any later version.
%
%  This program is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with this program.  If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%% COMPUTATIONS.
%
% Reduce sys.A.
%
for i = 1:length( sys.A )
    redsys.A{ i } = U'*sys.A{ i }*V;
end
%
% Reduce sys.B.
%       
for i = 1:length( sys.B )
    redsys.B{ i } = U'*sys.B{ i };
end
%
% Reduce sys.C.
%
for i = 1:length( sys.C )
    redsys.C{ i } = sys.C{ i }*V;
end
%
% Reduce sys.E.
%
for i = 1:length( sys.E )
    redsys.E{ i } = U'*sys.E{ i }*V;
end
%
% Copy the rest of the input data to redsys. 
%
redsys.f.A = sys.f.A;
redsys.f.B = sys.f.B;
redsys.f.C = sys.f.C;
redsys.f.E = sys.f.E;
redsys.fgname = sys.fgname;
redsys.bounds.lb = sys.bounds.lb;
redsys.bounds.ub = sys.bounds.ub;
%
return